//! @file Ag/ObjectGL/BsaeTypes.hpp
//! @brief The declaration of basic data types required by core profile OpenGL
//! entry points.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2022-2025
//! @copyright This file is part of the Silver (Ag) project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/Ag for full license details.
//!
//! @note This file was generated from the Khronos XML API definition using
//! a bespoke code generation tool.
////////////////////////////////////////////////////////////////////////////////

#ifndef __15EC58E9_CDD7_44B0_BEA2_11EC221B8179_INCLUDED__
#define __15EC58E9_CDD7_44B0_BEA2_11EC221B8179_INCLUDED__

////////////////////////////////////////////////////////////////////////////////
// Dependent Header Files
////////////////////////////////////////////////////////////////////////////////
#include "Platform.hpp"

#include <KHR/khrplatform.h>

////////////////////////////////////////////////////////////////////////////////
// Data Type Declarations
////////////////////////////////////////////////////////////////////////////////
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
struct _cl_context;
struct _cl_event;
typedef char GLchar;
typedef char GLcharARB;
typedef double GLclampd;
typedef double GLdouble;
typedef int GLint;
typedef int GLsizei;
typedef struct __GLsync *GLsync;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef unsigned short GLhalfNV;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLVULKANPROCNV)(void);
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef void GLvoid;
typedef khronos_float_t GLfloat;
typedef khronos_uint8_t GLubyte;
typedef khronos_int8_t GLbyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef khronos_float_t GLclampf;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_intptr_t GLintptr;
typedef khronos_uint16_t GLhalf;
typedef khronos_uint64_t GLuint64;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_int32_t GLfixed;
typedef GLintptr GLvdpauSurfaceNV;

// A structure which resolves function pointers and detects extensions
// at runtime using an appropriate platform-specific interface.
struct APIResolver
{
    // A pointer to a function which reports successive errors.
    typedef unsigned int(APIENTRY *GetNextErrorFn)();

    // Returns true if the named extension is present in the current context.
    virtual bool isExtensionPresent(const char *extName) const = 0;

    // Returns a pointer to a named function in the current context or nullptr.
    virtual void *resolveEntryPoint(const char *fnName) const = 0;

    // Gets a pointer to a function which will get the next successive error
    // generated by the previous command on the current thread.
    virtual GetNextErrorFn getErrorReporterProc() const = 0;
};

//! @brief A namespace encapsulating core non-platform-specific OpenGL
//! commands and constants.
namespace gl {

// A value type representing and entry point to resolve
using EntryOffset = std::pair<size_t, const char *>;


////////////////////////////////////////////////////////////////////////////////
// Class Type Declarations
////////////////////////////////////////////////////////////////////////////////
//! @brief A base class for functors which access API function pointers within
//! an API data structure.
struct PerEntryPoint
{
public:
    // Construction/Destruction
    PerEntryPoint(void *basePtr);
    ~PerEntryPoint() = default;

protected:
    // Internal Functions
    void *&getEntryPoint(const EntryOffset &entry);

private:
    // Internal Fields
    void *_basePtr;
};

//! @brief A functor which sets function pointers to null.
struct ClearEntryPoint : public PerEntryPoint
{
    // Construction/Destruction
    ClearEntryPoint(void *basePtr);
    ~ClearEntryPoint() = default;

    // Operations
    void operator()(const EntryOffset &entry);
};

//! @brief A functor which resolves function pointers at runtime.
struct ResolveEntryPoint : public PerEntryPoint
{
public:
    // Construction/Destruction
    ResolveEntryPoint(void *basePtr, const APIResolver *resolver);
    ~ResolveEntryPoint() = default;

    // Operations
    void operator()(const EntryOffset &entry);
private:
    // Internal Fields
    const APIResolver *_resolver;
};

// A base class for a wrapper to a Core API.
class BaseAPI
{
protected:
    // Construction
    BaseAPI();
public:
    virtual ~BaseAPI() = default;

    // Operations
    virtual void resolve(const APIResolver *resolver);

protected:
    // Internal Functions
    void beforeCommand(const char *commandName, const void *entryPoint) const;
    void afterCommand(const char *commandName) const;
private:
    // Internal Fields
    unsigned int (APIENTRY *_getError)();
};

// A base class for a wrapper to an extension API.
class BaseExtension : public BaseAPI
{
protected:
    // Construction
    BaseExtension(const char *extName);

public:
    virtual ~BaseExtension() = default;

    // Accessors
    bool isPresent() const;

    // Operations
    virtual void resolve(const APIResolver *resolver) override;

private:
    // Internal Fields
    const char *_extName;
    bool _isPresent;
};

} // namespace gl

#endif // ifndef __15EC58E9_CDD7_44B0_BEA2_11EC221B8179_INCLUDED__
