//! @file Geometry/Exceptions.cpp
//! @brief The definition of various exception classes which are specific to the
//! domain of 2D geometry.
//! @author Nick Arkell
//! @copyright (c) 2021 Nick Arkell : Software Engineer
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////
#include "Ag/Geometry/Exceptions.hpp"

namespace Ag {
namespace Geom {

namespace {
////////////////////////////////////////////////////////////////////////////////
// Local Data Types
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Functions
////////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace.

////////////////////////////////////////////////////////////////////////////////
// NegativeSizeException Class Member Definitions
////////////////////////////////////////////////////////////////////////////////
const char *NegativeSizeException::Domain = "NegativeSizeException";

//! @brief Constructs an exception object defining when the program attempted
//! to process a spatial size with a negative value.
//! @param[in] isWidth True if the width component was negative or false if the
//! height component was negative.
NegativeSizeException::NegativeSizeException(bool isWidth)
{
    initialise(Domain, "The program attempted to define spatial extents with "
               "a negative component.",
               isWidth ? "The width component was negative." :
                         "The height component was negative",
               isWidth ? 1 : 2);
}

////////////////////////////////////////////////////////////////////////////////
// ZeroLengthVectorException Class Member Definitions
////////////////////////////////////////////////////////////////////////////////
const char *ZeroLengthVectorException::Domain = "ZeroLengthVectorException";

//! @brief Constructs an exception thrown when a vector which has a length of
//! near-enough zero is used in calculations where that situation is invalid.
//! @param[in] detail Details of the operation taking place when the invalid
//! vector was encountered.
ZeroLengthVectorException::ZeroLengthVectorException(utf8_cptr_t detail)
{
    initialise(Domain, "The program encountered a vector with zero length in "
               "an operation where that situation was invalid.", detail);
}

////////////////////////////////////////////////////////////////////////////////
// Global Function Definitions
////////////////////////////////////////////////////////////////////////////////

}} // namespace Ag::Geom
////////////////////////////////////////////////////////////////////////////////

