//! @file Geometry/Test_DrawScene.hpp
//! @brief The declaration of a class which renders a 2D scene to test geometry
//! algorithms.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2025
//! @copyright This file is part of the Silver (Ag) project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/Ag for full license details.
////////////////////////////////////////////////////////////////////////////////

#ifndef __AG_GEOMETRY_TEST_DRAW_SCENE_HPP__
#define __AG_GEOMETRY_TEST_DRAW_SCENE_HPP__

////////////////////////////////////////////////////////////////////////////////
// Dependent Header Files
////////////////////////////////////////////////////////////////////////////////
#include "Ag/Geometry.hpp"

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Data Type Declarations
////////////////////////////////////////////////////////////////////////////////
using IndexRange = std::pair<uint32_t, uint32_t>;
using RawVertex = std::pair<double, double>;

////////////////////////////////////////////////////////////////////////////////
// Class Declarations
////////////////////////////////////////////////////////////////////////////////
//! @brief A class which renders a 2D scene to test geometry algorithms.
class Scene
{
public:
    // Construction/Destruction
    Scene() = default;
    ~Scene() = default;

    // Accessors

    // Operations
    void loadGeometry(const RawVertex *vertices, size_t vertexCount,
                      const IndexRange *indices, size_t indexCount);
private:
    // Internal Types

    // Internal Functions

    // Internal Fields
    Ag::Geom::Rect2D _extents;
    Ag::Geom::DCEL::NodeTable _nodes;
    Ag::Geom::DCEL::EdgeTable _edges;
    Ag::Geom::DCEL::RingSystem _rings;
};

////////////////////////////////////////////////////////////////////////////////
// Function Declarations
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Templates
////////////////////////////////////////////////////////////////////////////////

#endif // Header guard
////////////////////////////////////////////////////////////////////////////////
